package main

import (
	"fmt"
	"mapreduce"
	"os"
	"strconv"
	"strings"
	"unicode"
)

//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
func mapF(filename string, contents string) []mapreduce.KeyValue {
	// Your code here (Part 1B).
	f := func(c rune) bool {
		return !unicode.IsLetter(c)
	}
	fields := strings.FieldsFunc(contents, f)  // Split contents with single words while stored in a slice
	//fmt.Println("fields => ", fields)
	var res []mapreduce.KeyValue

	// Generate slice including key value pairs, which derived from struct mapreduce.KeyValue.
	// There might be duplicates, but we are gonna deal with it in reduce function.
	for _, key := range fields {
		//fmt.Println("key => ", key)
		res = append(res, mapreduce.KeyValue{key, "1"})
	}
	return res
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
// key: "a", values: ["1","1","1"]
func reduceF(key string, values []string) string {
	// Your code here (Part 1B).
	//fmt.Println("key => ", key)
	//fmt.Println("values => ", values)
	var count int64
	count = 0
	for _, keyvalue := range values {
		// convert decimalism to size of 64, refer by https://go-zh.org/pkg/strconv/#ParseInt
		num, _ := strconv.ParseInt(keyvalue, 10, 64)
		count += num
	}
	//fmt.Println("count => ", count)
	return strconv.FormatInt(count, 10) // convert size of 64 to decimalism, refer by https://golang.org/pkg/strconv/#FormatInt
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100, nil)
	}
}
